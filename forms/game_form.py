# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'game_form.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtWidgets, QtGui
from PyQt5.QtCore import Qt, QAbstractTableModel, QModelIndex
from PyQt5.QtGui import QBrush, QColor, QPen
from PyQt5.QtWidgets import QStyledItemDelegate, QTableView, QHeaderView, QDialog, QLabel, QPushButton, QVBoxLayout, \
    QApplication, QAbstractItemView

from logic.cells import Ball, Wall
from logic.kugeim import Kugeim, Direction
from logic.settings import Settings


class Ui_Form(object):
    def __init__(self):
        self.game = Kugeim()
        self.size = Settings.cell_size
        self.moving_ball_pos = None
        self.mouse_press_pos_c = None
        self.mouse_press_pos_r = None

    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(self.size * len(self.game.field), self.size * len(self.game.field[0]))
        self.tableView = QtWidgets.QTableView(Form)
        self.tableView.setGeometry(
            QtCore.QRect(0, 0, self.size * len(self.game.field), self.size * len(self.game.field[0])))
        self.tableView.setObjectName("tableView")
        self.tableView.verticalHeader().hide()
        self.tableView.horizontalHeader().hide()
        self.tableView.setShowGrid(False)
        self.tableView.setMouseTracking(True)
        self.tableView.setSelectionMode(QAbstractItemView.NoSelection)
        self.tableView.setStyleSheet("QTableView::item:selected{ background-color: transparent; border: none; }")
        self.tableView.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
        self.tableView.verticalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
        Form.setMouseTracking(True)
        self.tableView.mousePressEvent = self.on_mouse_press
        self.tableView.mouseReleaseEvent = self.on_mouse_release
        self.update_field(self.game.field)

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Кугейм"))

    def update_field(self, field):
        self.tableView.setModel(GameModel(field))
        self.tableView.resizeColumnsToContents()
        self.tableView.resizeRowsToContents()
        self.tableView.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.tableView.setItemDelegate(BallDelegate(self.game.field))

    def on_mouse_press(self, event):
        if event.button() == Qt.LeftButton:
            index = self.tableView.indexAt(event.pos())
            if index.isValid():
                cell = self.game.field[index.row()][index.column()]
                if cell.__class__ == Ball:
                    self.mouse_press_pos_r = index.row()
                    self.mouse_press_pos_c = index.column()
                    self.moving_ball_pos = event.pos()
                else:
                    self.reset_click()

    def on_mouse_release(self, event):
        if self.moving_ball_pos is not None:
            diff = event.pos() - self.moving_ball_pos

            if abs(diff.x()) > abs(diff.y()):
                if diff.x() < 0:
                    is_win = self.game.move_ball(self.mouse_press_pos_r, self.mouse_press_pos_c, Direction.LEFT)
                else:
                    is_win = self.game.move_ball(self.mouse_press_pos_r, self.mouse_press_pos_c, Direction.RIGHT)
            else:
                if diff.y() < 0:
                    is_win = self.game.move_ball(self.mouse_press_pos_r, self.mouse_press_pos_c, Direction.UP)
                else:
                    is_win = self.game.move_ball(self.mouse_press_pos_r, self.mouse_press_pos_c, Direction.DOWN)

            if is_win:
                win_dialog = WinDialog()
                win_dialog.exec_()
            else:
                self.reset_click()
                self.update_field(self.game.field)

    def reset_click(self):
        self.moving_ball_pos = None
        self.mouse_press_pos_r = None
        self.mouse_press_pos_c = None


class GameModel(QAbstractTableModel):
    colors = {
        0: QColor(110, 110, 110),
        1: QColor(255, 0, 0),
        2: QColor(0, 0, 255),
        3: QColor(0, 255, 0)
    }

    def __init__(self, field):
        super().__init__()
        self.field = field
        self.delegate = BallDelegate(field)

    def rowCount(self, parent=QModelIndex()):
        return len(self.field)

    def columnCount(self, parent=QModelIndex()):
        return len(self.field[0])

    def data(self, index, role=Qt.DisplayRole):
        if role == Qt.BackgroundRole:
            row, col = index.row(), index.column()
            cell = self.field[row][col]
            if cell.__class__ == Wall or cell.__class__ == Ball:
                color = self.colors[cell.color]
            else:
                color = QColor(255, 255, 255)

            return color

    def headerData(self, section, orientation, role=Qt.DisplayRole):
        if role != Qt.DisplayRole:
            return None
        if orientation == Qt.Horizontal:
            return str(section + 1)
        else:
            return str(section + 1)


class BallDelegate(QStyledItemDelegate):
    def __init__(self, field):
        super().__init__()
        self.field = field

    def paint(self, painter, option, index):
        row, col = index.row(), index.column()
        cell = self.field[row][col]
        if cell.__class__ == Ball:
            painter.setBrush(QBrush(GameModel.colors[cell.color]))
            painter.setPen(Qt.NoPen)
            painter.drawEllipse(option.rect)
        elif cell.__class__ == Wall and cell.color == 0:
            painter.setBrush(Qt.gray)
            pen = QPen()
            pen.setColor(Qt.black)
            painter.setPen(pen)
            painter.drawRect(option.rect)
        else:
            QStyledItemDelegate.paint(self, painter, option, index)


class WinDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setStyleSheet("background-color: rgb(255, 246, 192);")
        self.setWindowTitle("Поздравляем!")
        self.setFixedSize(300, 100)

        font = QtGui.QFont()
        font.setFamily("Segoe Print")
        font.setPointSize(14)

        label = QLabel("Вы выиграли!")
        label.setFont(font)
        label.setAlignment(Qt.AlignCenter)

        ok_button = QPushButton("OK")
        ok_button.setFont(font)
        ok_button.setFlat(True)
        ok_button.setStyleSheet("border:none; background-color: none;")
        ok_button.setFocusPolicy(QtCore.Qt.NoFocus)
        ok_button.clicked.connect(self.accepted)

        layout = QVBoxLayout()
        layout.addWidget(label)
        layout.addWidget(ok_button)

        self.setLayout(layout)

    def accepted(self):
        super().accepted()
        QApplication.quit()

    def reject(self):
        super().reject()
        QApplication.quit()
